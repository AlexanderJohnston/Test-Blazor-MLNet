@page "/ProbabilityTest"
@inject BaseballDataSampleService BaseballDataService

<strong class="form-text">Local prediction inference in Blazor and ML.NET</strong>
<br />

<small class="form-text text-muted"><b>Select </b> the algorithm used in the ML.NET model for prediction:</small>
<select id="algorithmName" @onchange="OnSelectedAlgorithm">
    <option value="AveragedPerceptron">AveragedPerceptron</option>
    <option value="FastForest">FastForest</option>
    <option value="FastTree">FastTree</option>
    <option value="GeneralizedAdditiveModels">GeneralizedAdditiveModels</option>
    <option selected value="LightGbm">LightGbm</option>
    <option value="LogisticRegression">LogisticRegression</option>
    <option value="StochasticGradientDescentCalibrated">StochasticGradientDescentCalibrated</option>
    <option value="StochasticGradientDescentNonCalibrated">StochasticGradientDescentNonCalibrated</option>
    <option value="LinearSupportVectorMachines">LinearSupportVectorMachines</option>
</select>

<small class="form-text text-muted"><b>Select or Search</b> any MLB Batter to perform prediction:</small>
<BlazoredTypeahead SearchMethod="@SearchBaseballPlayers"
                   @bind-Value="@SelectedBatter"
                   Debounce="150" MaximumSuggestions="25"
                   EnableDropDown="true" ShowDropDownOnFocus="true">
    <SelectedTemplate>
        <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed+1))
    </SelectedTemplate>
    <ResultTemplate>
        <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed+1))
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any baseball players found.
    </NotFoundTemplate>
</BlazoredTypeahead>

@*<br />
    <small class="form-text text-muted"><b>Probability of Hall Of Fame Induction: </b> @probability</small>
    <small class="form-text text-muted"><b>Classification (Label) on Hall Of Fame Indcution: </b> @predLabel</small>
    <br />*@
<table class="table">
    <thead>
        <tr>

            <th>Year Played</th>
            <th>HoF Ballot - Probability</th>
            <th>HoF Ballot - Class Label</th>
            <th>HoF Induction - Probability</th>
            <th>HoF Induction - Class Label</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var pred in batterSeasonPredictions)
        {
        <tr>
            <td>@pred.SeasonNumber</td>
            <td>@pred.OnHallOfFameBallotProbability</td>
            <td>@pred.OnHallOfFameBallotPrediction</td>
            <td>@pred.InductedToHallOfFameProbability</td>
            <td>@pred.InductedToHallOfFamePrediction</td>
        </tr>
        }
    </tbody>
</table>

@code {

    DataViewSchema schema;
    MLContext mlContext;

    public List<MLBBaseballBatter> batters;
    public List<MLBBaseballBatterSeasonPrediction> batterSeasonPredictions;
    private MLBBaseballBatter _selectedBatter;
    private string selectedAlgorithm = "LightGbm"; //default
    private string[] predictionTypes = {"InductedToHallOfFame", "OnHallOfFameBallot"};

    public MLBBaseballBatter SelectedBatter
    {
        get { return _selectedBatter; }
        set
        {
            _selectedBatter = value;
            Console.WriteLine("Selected Batter: " + _selectedBatter.FullPlayerName);
            this.PerformPrediction();
        }
    }

    private string probability = "0";
    private bool predLabel = false;

    private PredictionEngine<MLBBaseballBatter, MLBHOFPrediction> _predictionEngineInductedToHallOfFame;
    private PredictionEngine<MLBBaseballBatter, MLBHOFPrediction> _predictionEngineOnHallOfFameBallot;

    protected override async Task OnInitializedAsync()
    {
        this.mlContext = new MLContext();

        // Build baseball batters list
        batters = await BaseballDataService.GetSampleBaseballData();

        this.SelectedBatter = batters.Where(a => a.FullPlayerName == MLBBaseballBatter.GetDefaultBatter()).FirstOrDefault();
    }


    void OnSelectedAlgorithm(ChangeEventArgs e)
    {
        this.selectedAlgorithm = e.Value.ToString();
        Console.WriteLine("Selected Algorithm: " + selectedAlgorithm);

        this.PerformPrediction();
    }

    private async Task<IEnumerable<MLBBaseballBatter>> SearchBaseballPlayers(string searchText)
    {
        return await Task.FromResult(batters.Where(x => x.FullPlayerName.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private void PerformPrediction()
    {
        var _predictionEngineInductedToHallOfFame = Util.GetPredictionEngine(this.mlContext, this.predictionTypes[0], selectedAlgorithm);
        var _predictionEngineOnHallOfFame = Util.GetPredictionEngine(this.mlContext, this.predictionTypes[1], selectedAlgorithm);

        batterSeasonPredictions = new List<MLBBaseballBatterSeasonPrediction>();

        for (int i = 0; i != SelectedBatter.YearsPlayed; i++)
        {
            var season = i + 1;
            var onHallOfFameBallotPrediction = _predictionEngineOnHallOfFame.Predict(this.SelectedBatter.CalculateStatisticsProratedBySeason(season));
            var inductedToHallOfFamePrediction = _predictionEngineInductedToHallOfFame.Predict(this.SelectedBatter.CalculateStatisticsProratedBySeason(season));

            var seasonPrediction = new MLBBaseballBatterSeasonPrediction
            {
                SeasonNumber = season,
                FullPlayerName = SelectedBatter.FullPlayerName,
                InductedToHallOfFamePrediction = inductedToHallOfFamePrediction.Prediction,
                InductedToHallOfFameProbability = Math.Round(inductedToHallOfFamePrediction.Probability, 5, MidpointRounding.AwayFromZero),
                OnHallOfFameBallotPrediction = onHallOfFameBallotPrediction.Prediction,
                OnHallOfFameBallotProbability = Math.Round(onHallOfFameBallotPrediction.Probability, 5, MidpointRounding.AwayFromZero)
            };

            batterSeasonPredictions.Add(seasonPrediction);
        }


        //probability = (prediction.Probability == 0f) ? "Algorithm does not support probability output." : prediction.Probability.ToString();
        //predLabel = prediction.Prediction;
    }
}
