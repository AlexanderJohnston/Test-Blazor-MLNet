@page "/ProbabilityTest"
@inject BaseballDataSampleService BaseballDataService

<strong class="form-text">Local prediction inference in Blazor and ML.NET</strong>
<br/>

<small class="form-text text-muted"><b>Select </b> the algorithm used in the ML.NET model for prediction:</small>
<select id="algorithmName" @onchange="OnSelectedAlgorithm">
    <option value="AveragedPerceptron">AveragedPerceptron</option>
    <option value="FastForest">FastForest</option>
    <option value="FastTree">FastTree</option>
    <option value="GeneralizedAdditiveModels">GeneralizedAdditiveModels</option>
    <option selected value="LightGbm">LightGbm</option>
    <option value="LinearSupportVectorMachines">LinearSupportVectorMachines</option>
</select>

<small class="form-text text-muted"><b>Select or Search</b> any MLB Batter to perform prediction:</small>
<BlazoredTypeahead SearchMethod="@SearchBaseballPlayers"
                   @bind-Value="@SelectedBatter"
                   Debounce="150" MaximumSuggestions="25"
                   EnableDropDown="true" ShowDropDownOnFocus="true">
    <SelectedTemplate>
        <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed+1))
    </SelectedTemplate>
    <ResultTemplate>
        <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed+1))
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any baseball players found.
    </NotFoundTemplate>
</BlazoredTypeahead>

<br/>
<p>Probability: @probability</p>
<p>Predicted Label: @predLabel</p>

@code {

    DataViewSchema schema;
    MLContext mlContext;

    public List<MLBBaseballBatter> batters;
    private MLBBaseballBatter _selectedBatter;
    private string selectedAlgorithm = "LightGbm";

    public MLBBaseballBatter SelectedBatter {
        get { return _selectedBatter; }
        set
        {
            _selectedBatter = value;
            this.PerformPrediction();
        }
    }

    private string probability = "0";
    private bool predLabel = false;

    private PredictionEngine<MLBBaseballBatter, MLBHOFPrediction> _predictionEngine;

    protected override async Task OnInitializedAsync()
    {
        this.mlContext = new MLContext();

        // Build baseball batters list
        batters = await BaseballDataService.GetSampleBaseballData();

        this.SelectedBatter = batters.Where(a => a.FullPlayerName == MLBBaseballBatter.GetDefaultBatter()).FirstOrDefault();
    }


    void OnSelectedAlgorithm(ChangeEventArgs e)
    {
        this.selectedAlgorithm = e.Value.ToString();
        Console.WriteLine("Selected Algorithm: " + selectedAlgorithm);

        this.PerformPrediction();
    }

    private async Task<IEnumerable<MLBBaseballBatter>> SearchBaseballPlayers(string searchText)
    {
        return await Task.FromResult(batters.Where(x => x.FullPlayerName.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private void PerformPrediction()
    {
        var modelStream = Test_Blazor_MLNet.Shared.Util.GetInductedToHallOfFameModel(selectedAlgorithm);

        ITransformer _model = mlContext.Model.Load(modelStream, out schema);
        _predictionEngine = mlContext.Model.CreatePredictionEngine<MLBBaseballBatter, MLBHOFPrediction>(_model);

        var prediction = _predictionEngine.Predict(this.SelectedBatter);

        probability = (prediction.Probability == 0f) ? "Algorithm does not support probability output." : prediction.Probability.ToString();
        predLabel = prediction.Prediction;
    }
}
